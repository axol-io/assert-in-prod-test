#name: Run assertoor tests on kurtosis with kubernetes backend

on:
  workflow_call:
    inputs:
      id:
        type: string
        description: "The test identifier."
        required: true
      pairs:
        type: string
        description: "The client pairs to use (format: consensus1-execution1,consensus2-execution2,...)."
        required: true
      worker:
        type: string
        description: "The worker to use (default: ubuntu-latest)."
        default: "ubuntu-latest"
      backend:
        type: string
        description: "The backend type to use (docker, kubernetes)."
        default: "docker"
      kubeCluster:
        type: string
        description: "The name of the cluster to run the test on."
        required: true
      kubeStorageClass:
        type: string
        description: "The kubernetes storage class to run the kurtosis engine with."
        required: true
      clients:
        type: string
        description: "The clients config to use (default: clients/latest.yaml)."
        default: "clients/latest.yaml"
      kurtosis:
        type: string
        description: "The kurtosis network config to use (default: kurtosis-config/default.yaml)."
        default: "kurtosis-config/default.yaml"
      assertoor_tests:
        type: string
        description: "The list of assertoor test files to run."
        required: true
    secrets:
      KUBECONFIG:
        description: 'Kubernetes config'
        required: true

jobs:
  run_test:
    name: "Run ${{ inputs.id }}"
    runs-on: ${{ inputs.worker }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: "Generate kurtosis config with client pairs: ${{ inputs.pairs }}"
      shell: bash
      run: |
        clients_file="${{ inputs.clients }}"
        kurtosis_file="${{ inputs.kurtosis }}"
        pairs="${{ inputs.pairs }}"

        mkdir -p ./temp
        touch ./temp/participants.yaml

        if [ ! -z "$pairs" ]; then
          echo "participants:" >> ./temp/participants.yaml
          client_idx=0
          for pair in $(echo $pairs | tr "," "\n")
          do
            client_idx=$(expr $client_idx + 1)
            if [ "$pair" == "random" ]; then
              cl_type="random"
              el_type="random"
            else
              cl_type=$(echo "$pair" | sed 's/^\(.*\)-\(.*\)$/\1/')
              el_type=$(echo "$pair" | sed 's/^\(.*\)-\(.*\)$/\2/')
            fi
            
            if [[ "$cl_type" == *"/"* ]]; then
              vc_type=$(echo "$cl_type" | sed 's/^\(.*\)\/\(.*\)$/\2/')
              cl_type=$(echo "$cl_type" | sed 's/^\(.*\)\/\(.*\)$/\1/')
            else
              vc_type=$cl_type
            fi

            if [ "$cl_type" == "random" ]; then
              cl_type=$(cat $clients_file | yq -r ".consensus | keys" | shuf | tr -d ' -' | head -n 1)
            fi
            if [ "$vc_type" == "random" ]; then
              vc_type=$(cat $clients_file | yq -r ".consensus | keys" | shuf | tr -d ' -' | head -n 1)
            fi
            if [ "$el_type" == "random" ]; then
              el_type=$(cat $clients_file | yq -r ".execution | keys" | shuf | tr -d ' -' | head -n 1)
            fi

            cl_image="$(cat $clients_file | yq ".consensus.${cl_type}.image")"
            if [ "$cl_image" == "null" ]; then
              echo "Unknown CL client type: $cl_type"
              exit 1
            fi

            vc_image="$(cat $clients_file | yq ".consensus.${vc_type}.vc_image // .consensus.${vc_type}.image")"
            if [ "$vc_image" == "null" ]; then
              echo "Unknown VC client type: $vc_type"
              exit 1
            fi

            el_image="$(cat $clients_file | yq ".execution.${el_type}.image")"
            if [ "$el_image" == "null" ]; then
              echo "Unknown EL client type: $el_type"
              exit 1
            fi

            echo "  - el_client_type: $el_type" >> ./temp/participants.yaml
            echo "    el_client_image: $el_image" >> ./temp/participants.yaml
            el_extra_params="$(cat $clients_file | yq ".execution.${el_type}.params")"
            if [ "$el_extra_params" != "null" ]; then
              echo "    el_extra_params: $el_extra_params" >> ./temp/participants.yaml
            fi

            echo "    cl_client_type: $cl_type" >> ./temp/participants.yaml
            echo "    cl_client_image: $cl_image" >> ./temp/participants.yaml
            cl_extra_params="$(cat $clients_file | yq ".consensus.${cl_type}.params")"
            if [ "$cl_extra_params" != "null" ]; then
              echo "    beacon_extra_params: $cl_extra_params" >> ./temp/participants.yaml
            fi

            echo "    validator_client_type: $vc_type" >> ./temp/participants.yaml
            echo "    validator_client_image: $vc_image" >> ./temp/participants.yaml
            vc_extra_params="$(cat $clients_file | yq ".consensus.${cl_type}.vc_params")"
            if [ "$vc_extra_params" != "null" ]; then
              echo "    validator_extra_params: $vc_extra_params" >> ./temp/participants.yaml
            fi

            echo "    count: 1" >> ./temp/participants.yaml

            echo "Client $client_idx"
            echo "CL: $cl_type  ($cl_image)"
            echo "VC: $vc_type  ($vc_image)"
            echo "EL: $el_type  ($el_image)"
          done
        fi

        export PUBURL="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}"

        cp ./temp/participants.yaml ./temp/test-network.yaml
        cat $kurtosis_file | envsubst >> ./temp/test-network.yaml

        kurtosis_cfg="$(cat ./temp/test-network.yaml | yq '.assertoor_params.tests=[]')"
        tests_json=$(
        cat <<"EOF"
        ${{ inputs.assertoor_tests }}
        EOF
        )
        test_index=0
        while read assertoorTest; do
          kurtosis_cfg="$(echo "$kurtosis_cfg" | yq ".assertoor_params.tests[$test_index]=\"$PUBURL/$assertoorTest\"")"
          test_index=$(expr $test_index + 1)
        done <<< $(echo "$tests_json" | jq -r '.[]')
        echo "$kurtosis_cfg" > ./temp/test-network.yaml

        echo ""
        cat ./temp/test-network.yaml

    - name: Setup Kurtosis
      shell: bash
      run: |
        echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
        sudo apt update
        sudo apt install kurtosis-cli
        kurtosis analytics disable

    - name: Setup kubectl
      if: ${{ inputs.backend == 'kubernetes' }}
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBECONFIG }}
    - name: Check Kubernetes engine
      if: ${{ inputs.backend == 'kubernetes' }}
      shell: bash
      run: |
        set -e
        kubectl config use-context ${{ inputs.kubeCluster }}
        kubectl get nodes

        echo "Kubernetes engine is ready!"
    - name: Configure kurtosis to use kubernetes backend
      if: ${{ inputs.backend == 'kubernetes' }}
      shell: bash
      run: |
        kurtosis_config=$(kurtosis config path)
        echo "config-version: 2" > $kurtosis_config
        echo "should-send-metrics: false" >> $kurtosis_config
        echo "kurtosis-clusters:" >> $kurtosis_config
        echo "  docker:" >> $kurtosis_config
        echo "    type: \"docker\"" >> $kurtosis_config
        echo "  cloud:" >> $kurtosis_config
        echo "    type: \"kubernetes\"" >> $kurtosis_config
        echo "    config:" >> $kurtosis_config
        echo "      kubernetes-cluster-name: \"${{ inputs.kubeCluster }}\"" >> $kurtosis_config
        echo "      storage-class: \"${{ inputs.kubeStorageClass }}\"" >> $kurtosis_config
        echo "      enclave-size-in-megabytes: 200" >> $kurtosis_config

        cat $kurtosis_config

        kurtosis cluster set cloud
        kurtosis gateway &

        kurtosis engine status
        kurtosis enclave ls

    - name: Run Kurtosis
      shell: bash
      id: services
      run: |
        if [ "${{ inputs.backend }}" == "kubernetes" ]; then
          kurtosis gateway &
        fi

        kurtosis run github.com/kurtosis-tech/ethereum-package@bbusa/gballet-local-snap --enclave assertoor-${{ inputs.id }} --args-file ./temp/test-network.yaml

        enclave_dump=$(kurtosis enclave inspect assertoor-${{ inputs.id }})

        assertoor_url=$(echo "$enclave_dump" | grep assertoor | grep http | sed 's/.*\(http:\/\/[0-9.:]\+\).*/\1/')
        echo "assertoor_url: ${assertoor_url}"
        echo "assertoor_url=${assertoor_url}" >> $GITHUB_OUTPUT

    - name: Await test completion
      shell: bash
      id: test_result
      run: |
        assertoor_url="${{ steps.services.outputs.assertoor_url }}"

        YELLOW='\033[1;33m'
        GRAY='\033[0;37m'
        GREEN='\033[0;32m'
        RED='\033[0;31m'
        NC='\033[0m'

        if [ "${{ inputs.backend }}" == "kubernetes" ]; then
          # print assertor logs
          kubectl -n kt-assertoor-${{ inputs.id }} logs -f assertoor &

          # run kurtosis gateway
          kurtosis gateway &
        else
          # print assertor logs
          assertoor_container=$(docker container list | grep assertoor | sed 's/^\([^ ]\+\) .*$/\1/')
          docker logs -f $assertoor_container &
        fi

        # helper to fetch task status for specific test id
        get_tasks_status() {
          tasks=$(curl -s ${assertoor_url}/api/v1/test_run/$1 | jq -c ".data.tasks[] | {index, parent_index, name, title, status, result}")
          declare -A task_graph_map
          task_graph_map[0]=""

          while read task; do
            task_id=$(echo "$task" | jq -r ".index")
            task_parent=$(echo "$task" | jq -r ".parent_index")
            task_name=$(echo "$task" | jq -r ".name")
            task_title=$(echo "$task" | jq -r ".title")
            task_status=$(echo "$task" | jq -r ".status")
            task_result=$(echo "$task" | jq -r ".result")

            task_graph="${task_graph_map[$task_parent]}"
            task_graph_map[$task_id]="$task_graph |"
            if [ ! -z "$task_graph" ]; then
              task_graph="${task_graph}- "
            fi

            if [ "$task_status" == "pending" ]; then
              task_status="${GRAY}pending ${NC}"
            elif [ "$task_status" == "running" ]; then
              task_status="${YELLOW}running ${NC}"
            elif [ "$task_status" == "complete" ]; then
              task_status="${GREEN}complete${NC}"
            fi

            if [ "$task_result" == "none" ]; then
              task_result="${GRAY}none   ${NC}"
            elif [ "$task_result" == "success" ]; then
              task_result="${GREEN}success${NC}"
            elif [ "$task_result" == "failure" ]; then
              task_result="${RED}failure${NC}"
            fi
            
            echo -e " $(printf '%-4s' "$task_id")\t$task_status\t$task_result\t$(printf '%-50s' "$task_graph$task_name") \t$task_title"
          done <<< $(echo "$tasks")
        }

        # poll & check test status
        final_test_result=""
        failed_test_id=""
        while true
        do
          pending_tests=0
          failed_tests=0
          total_tests=0
          running_test=""

          status_lines=()
          task_lines=""
          status_lines+=("$(date +'%Y-%m-%d %H:%M:%S')  Test Status:")

          tests=$(curl -s ${assertoor_url}/api/v1/test_runs | jq -c ".data[] | {run_id, test_id, name, status}")
          while read test; do
            if [ -z "$test" ]; then
              continue
            fi
            run_id=$(echo "$test" | jq -r ".run_id")
            test_id=$(echo "$test" | jq -r ".test_id")
            test_name=$(echo "$test" | jq -r ".name")
            test_status=$(echo "$test" | jq -r ".status")

            if [ "$test_status" == "pending" ]; then
              pending_tests=$(expr $pending_tests + 1)
              status_name="${GRAY}pending${NC}"
            elif [ "$test_status" == "running" ]; then
              pending_tests=$(expr $pending_tests + 1)
              running_test="$run_id"
              status_name="${YELLOW}running${NC}"

            elif [ "$test_status" == "success" ]; then
              status_name="${GREEN}success${NC}"
            elif [ "$test_status" == "failure" ]; then
              failed_tests=$(expr $failed_tests + 1)
              failed_test_id="$run_id"
              status_name="${RED}failure${NC}"
            else
              status_name="$test_status"
            fi
            status_lines+=("  $(printf '%-3s' "$test_id") $status_name \t$test_name")
            total_tests=$(expr $total_tests + 1)
          done <<< $(echo "$tests")

          for status_line in "${status_lines[@]}"
          do
            echo -e "$status_line"
          done

          if ! [ -z "$running_test" ]; then
            task_lines=$(get_tasks_status "$running_test")
            echo "Active Test Task Status:"
            echo "$task_lines"
          fi

          if [ $failed_tests -gt 0 ]; then 
            final_test_result="failure"
            break
          fi
          if [ $total_tests -gt 0 ] && [ $pending_tests -le 0 ]; then
            final_test_result="success"
            break
          fi

          sleep 60
        done

        # save test results & status to github output
        echo "test_result=$(echo "$final_test_result")" >> $GITHUB_OUTPUT
        echo "test_status<<EOF" >> $GITHUB_OUTPUT
        for status_line in "${status_lines[@]}"
        do
          echo -e "$status_line" >> $GITHUB_OUTPUT
        done
        echo "EOF" >> $GITHUB_OUTPUT

        if ! [ -z "$failed_test_id" ]; then
          echo "failed_test_status<<EOF" >> $GITHUB_OUTPUT
          get_tasks_status "$failed_test_id" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "failed_test_status=" >> $GITHUB_OUTPUT
        fi

    - name: Generate dump and remove kurtosis enclave
      shell: bash
      run: |
        mkdir -p ./temp/dump
        cd ./temp/dump
        cp ../test-network.yaml ./kurtosis-params.yaml

        kurtosis enclave dump assertoor-${{ inputs.id }}
        kurtosis enclave rm -f assertoor-${{ inputs.id }}

    - name: Upload dump artifact
      uses: actions/upload-artifact@v3
      with:
        name: "kurtosis-enclave-dump-${{ inputs.id }}"
        path: ./temp/dump
    
    - name: Return test result
      shell: bash
      run: |
        test_result="${{ steps.test_result.outputs.test_result }}"
        test_status=$(
        cat <<"EOF"
        ${{ steps.test_result.outputs.test_status }}
        EOF
        )
        failed_test_status=$(
        cat <<"EOF"
        ${{ steps.test_result.outputs.failed_test_status }}
        EOF
        )

        echo "Test Result:  $test_result"
        echo "$test_status"

        if ! [ "$test_result" == "success" ]; then
          echo ""
          echo "Failed Test Task Status:"
          echo "$failed_test_status"

          echo ""
          echo "See 'Await test completion' task for detailed logs about this failure!"
          echo ""

          exit 1 # fail action
        fi
